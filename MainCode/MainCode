////////////////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////////////////
// Alarm Global
#include "SoftwareSerial.h"
#include "DFRobotDFPlayerMini.h"

SoftwareSerial mySoftwareSerial(2, 4); // RX, TX
DFRobotDFPlayerMini myDFPlayer;

// Gyro Global
#include "mpu9250.h"
#include<Wire.h>

///* An Mpu9250 object with the MPU-9250 sensor on I2C bus 0 with address 0x68 */
//Mpu9250 imu(&Wire, 0x68);
//int status;

const int MPU_addr=0x68;
int16_t AcX,AcY,AcZ,Tmp,GyX,GyY,GyZ;
 
int minVal=265;
int maxVal=402;
 
double x;
double y;
double z;
int Angle_Z;
int Angle;

// Timer
int time;

// Seat Sensor 
const int SEAT_SENSOR_PIN = 13; 
int SEATState;
int SeatSenseState;

// Buddy Button
int BuddyState;

// Buddy Button Setup
const int buttonPin = 2; // Replace with the pin you connected the button to
volatile bool buttonPressed = false;
////////////////////////////////////////////////////////////////////////







////////////////////////////////////////////////////////////////////////
void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);                    // initialize serial   
pinMode(SEAT_SENSOR_PIN, INPUT);

// Setup for the Gyro
Wire.begin();
Wire.beginTransmission(MPU_addr);
Wire.write(0x6B);
Wire.write(0);
Wire.endTransmission(true);
//Serial.begin(9600);

// SenseSeat
int SeatFlag;

// Buddy Button Setup
pinMode(buttonPin, INPUT_PULLUP); // Enable internal pull-up resistor
attachInterrupt(digitalPinToInterrupt(buttonPin), buttonInterrupt, FALLING); // Attach interrupt to buttonPin
//Serial.begin(9600); // Initialize serial communication

// Timer
//setTime(0);

// Alarm 
if (!myDFPlayer.begin(mySoftwareSerial)) {  
    Serial.println(F("Unable to begin:"));
    Serial.println(F("1.Please recheck the connection!"));
    Serial.println(F("2.Please insert the SD card!"));
    while(true){
      delay(0); // Code to compatible with ESP8266 watch dog.
    }
}
Serial.println(F("DFPlayer Mini online."));
myDFPlayer.volume(30);

}
////////////////////////////////////////////////////////////////////////






////////////////////////////////////////////////////////////////////////
void loop() {
int SeatFlag;
// put your main code here, to run repeatedly:
//Device turned on

//ON

// Check the pressure sensor status here
SeatSenseState = SeatSensor();
if (SeatSenseState == 1 )
{
  SeatFlag = 1;
}
else
{
  SeatFlag = 0;
}
Serial.println("The Pressure Sensor Status is %d",SeatFlag);
if(SeatFlag ==1)
// Check the gyro angle
int ShiftDetectedFlag = 0;

Angle = CheckAngle();

if ()
{
while(ShiftDetectedFlag != 1)
{
  if((Angle <= 315)&&(Angle>=200)) 
  {
  Serial.println("Shift Detected");
  ShiftDetectedFlag = 1;
  break;
  }
  Serial.println("Please Shift");
  Alarm1();
  delay(20000);
}
 //Test
  delay(10000);
  //Actual 
  //delay(1200000);
  Alarm1();
  Angle = CheckAngle();
  if ((Angle >= 315)&&(Angle<=200))
  {
    Serial.prinln("Shifted Back");
    ShiftDetectedFlag = 0;
    //Test
    delay(10000);
  }
/*
if (ShiftDetectedFlag != 1)
{
  if((Angle <= 315)&&(Angle>=200)) {
  Serial.println("Shift Detected");
  ShiftDetectedFlag = 1;
  break;
  
  Serial.println("Please Shift");
  Alarm1();
  delay(20000);
  }
  else{
  //Test
  delay(10000);
  //Actual 
  //delay(1200000);
  Alarm1();
 */
 
  Angle = CheckAngle();
  if ((Angle >= 315)&&(Angle<=200))
  {
    Serial.prinln("Shifted Back");
    ShiftDetectedFlag = 0;
    //Test
    delay(10000);
    //Actual 
    //delay(1200000);
    break;
  }
 
  }

else{
  //Delaying 2 hrs
  //Test 
  delay(15000)
  //Actual delay(7200000)
}


// if "non zero"
// Go back to the original position

// Else "Run the timer for 90 seconds"

//ACT: delay(90000);
delay(2000);
// Start the timer for 20 min
delay(2000);

//ACT: delay(1200000);
// Remind the patients to tilt the weight

// Detect the shift 
// if enogh
// Start the 90 sec timer
// ALARM2 OPTIONAL REMINDER - Feel free to switch back to the normal position
// Start the timer for 20 min
// ALARM - Please tilt the chair

}

int CheckAngle() {

Wire.beginTransmission(MPU_addr);
Wire.write(0x3B);
Wire.endTransmission(false);
Wire.requestFrom(MPU_addr,14,true);
AcX=Wire.read()<<8|Wire.read();
AcY=Wire.read()<<8|Wire.read();
AcZ=Wire.read()<<8|Wire.read();
int xAng = map(AcX,minVal,maxVal,-90,90);
int yAng = map(AcY,minVal,maxVal,-90,90);
int zAng = map(AcZ,minVal,maxVal,-90,90);

x= RAD_TO_DEG * (atan2(-yAng, -zAng)+PI);
y= RAD_TO_DEG * (atan2(-xAng, -zAng)+PI);
z= RAD_TO_DEG * (atan2(-yAng, -xAng)+PI);
 
Serial.print("AngleX= ");
Serial.println(x);
 
Serial.print("AngleY= ");
Serial.println(y);
 
Serial.print("AngleZ= ");
Serial.println(z);
Angle_Z = z;
return Angle_Z;

Serial.println("-----------------------------------------");
delay(400);
}
////////////////////////////////////////////////////////////////////////






////////////////////////////////////////////////////////////////////////
int SeatSensor() { 
 SEATState = digitalRead(SEAT_SENSOR_PIN); // read state    
  if (SEATState == LOW) {     
    Serial.println("1");   
    } 
  else {     
    Serial.println("0");   
    } 
}  

int BuddyButtonState(){
    if (buttonPressed) {
    Serial.println("Button pressed");
    asm volatile("  jmp 0");
    buttonPressed = false; // Reset buttonPressed flag
  }

}

void buttonInterrupt() {
  buttonPressed = true;
}

void Alarm1() {
  myDFPlayer.play(3);  //Play the first file
  delay(5000); // Wait for 5 seconds before playing the next alarm
}

void Alarm2() {
  myDFPlayer.play(4);  //Play the second file
  delay(5000); // Wait for 5 seconds before playing the next alarm
}

void Alarm3() {
  myDFPlayer.play(2);  //Play the third file
  delay(5000); // Wait for 5 seconds before playing the next alarm
}
////////////////////////////////////////////////////////////////////////
